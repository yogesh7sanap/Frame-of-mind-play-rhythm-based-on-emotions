/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.  
 */
package com.svm;


import com.constant.ServerConstants;
import helper.*;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import javacvtesting.FaceEmotions;
import javacvtesting.SingleImagePoints;
import javax.imageio.ImageIO;
import javax.swing.*;
import org.apache.commons.net.DatabaseHelper;
import org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_core.*;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.Point2f;
import org.bytedeco.javacpp.opencv_core.Point2fVector;
import org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
import org.bytedeco.javacpp.opencv_core.RectVector;
import org.bytedeco.javacpp.opencv_core.Scalar;
import org.bytedeco.javacpp.opencv_face.Facemark;
import org.bytedeco.javacpp.opencv_face.FacemarkLBF;
import static org.bytedeco.javacpp.opencv_face.drawFacemarks;
import org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
import static org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.*;
import org.bytedeco.javacv.Frame;
import org.jfree.chart.JFreeChart;
import test.getResult;

public class Main extends javax.swing.JFrame {

    DefaultTableModel model1 = null, model2 = null, model3 = null, model4 = null;
    DefaultComboBoxModel combo1 = null;
//    ArrayList<Object>
    Facemark facemark = FacemarkLBF.create();
    ArrayList<ArrayList<String[]>> allData = null;
    ArrayList<ArrayList<String[]>> allDataModified = null;
    ArrayList<ArrayList<String[]>> allDataRatingsEmoticons = null;
    ArrayList allDataRatingsWord = new ArrayList();
    ArrayList<Object[]> totalRatings = new ArrayList<Object[]>();
    private int ASCII_SIZE = 256;
    public static boolean isChecked = true;

    public Main() {

        initComponents();



//        ServerConstants.init();

        facemark.loadModel(".\\GSOC2017-master\\data\\lbfmodel.yaml");
        new Thread() {

            @Override
            public void run() {
                super.run();
                ServerConstants.init();
            }
        }.start();
    }
    boolean breakLoop = false;
    CascadeClassifier faceDetector = new CascadeClassifier("haarcascade_frontalface_alt2.xml");
    VideoCapture cap;
    Mat captured;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sqlDateModel1 = new org.jdatepicker.impl.SqlDateModel();
        sqlDateModel2 = new org.jdatepicker.impl.SqlDateModel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jpanelbody = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        ischecked = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        liveCamera = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ProcessImageLable = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        pathField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabelFinal = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        imageLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Face Player :  ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jpanelbody.setName("jpanelbody");

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnStart.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        btnStart.setText("Start Camera");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        ischecked.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ischecked.setText("Face Tagging");
        ischecked.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ischeckedItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnStart)
                .addGap(18, 18, 18)
                .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ischecked, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ischecked, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Live Camera", 0, 0, new java.awt.Font("Copperplate Gothic Light", 0, 12))); // NOI18N
        jPanel6.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 12)); // NOI18N

        liveCamera.setPreferredSize(new java.awt.Dimension(500, 500));
        liveCamera.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                liveCameraMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(liveCamera);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process", 0, 0, new java.awt.Font("Copperplate Gothic Light", 0, 12))); // NOI18N
        jPanel8.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        result.setPreferredSize(new java.awt.Dimension(500, 500));
        result.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(result);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpanelbodyLayout = new javax.swing.GroupLayout(jpanelbody);
        jpanelbody.setLayout(jpanelbodyLayout);
        jpanelbodyLayout.setHorizontalGroup(
            jpanelbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelbodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpanelbodyLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpanelbodyLayout.setVerticalGroup(
            jpanelbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelbodyLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanelbodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        new DatabaseHelper();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelbody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelbody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fetch Data", jPanel2);

        jTable2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr. No", "mouthw", "mouthh", "reyew", "reyeh", "leyew", "leyeh", "nosew"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton2.setText("Generate Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Image Feature Data");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr. No", "Disicion"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jButton3.setText("Brows Image");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        pathField1.setText("D:\\work\\ReceivedFiles\\00.jpg");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Final Desicion");

        jLabelFinal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(pathField1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ProcessImageLable, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(pathField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(ProcessImageLable, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Analysis Data", jPanel4);

        jTable4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr. No", "mouthw", "mouthh", "reyew", "reyeh", "leyew", "leyeh", "nosew", "dicision"
            }
        ));
        jScrollPane4.setViewportView(jTable4);
        jTable4.getColumnModel().getColumn(8).setHeaderValue("dicision");

        jLabel7.setText("Pretrained DataSet");
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton4.setText("Load Dataset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 977, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(225, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pretrainde DataSet", jPanel10);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 51));
        jLabel1.setText("Face Player : Emotion Based Music Player");

        imageLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/index.png"))); // NOI18N
        imageLable.setText("jLabel15");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(imageLable, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 927, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
//        imshow("Captured", new Mat() ); 
        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() {
                try {
                    SimpleAudioPlayer audioPlayer = SimpleAudioPlayer.InitializeAudioPlayer();

                    cap = new VideoCapture(0);
                    captured = new Mat();
                    if (captured != null) {
                        cap.read(captured);
                        System.out.println("Width/Height " + captured.cols() + "/" + captured.rows());
                        captured.release();
                    }
                    Thread.sleep(5000);
                    while (!breakLoop) {
                        allDataRatingsWord = new ArrayList();
//                        System.out.println("");
                        captured = new Mat();
                        cap.read(captured);
                        if (captured != null) {

                            Mat gray = new Mat(480, 600, 1);
                            ServerConstants.imgw = captured.size().width();
                            ServerConstants.imgh = captured.size().height();
                            cvtColor(captured, gray, COLOR_BGR2GRAY);
                            equalizeHist(gray, gray);
                            RectVector faces = new RectVector();
                            faceDetector.detectMultiScale(gray, faces);
                            StringBuffer xy = new StringBuffer();
                            StringBuffer hw = new StringBuffer();
                            StringBuffer xx = new StringBuffer();
                            StringBuffer yy = new StringBuffer();
//            System.out.println ("Faces detected: "+faces.size());
                            // Verify is at least one face is detected
                            // With some Facemark algorithms it crashes if there is no faces
                            Frame capt = OpenCVHelper.mat2frame(captured);
                            BufferedImage bicap = OpenCVHelper.frame2buffered(capt);
                            liveCamera.setIcon(new ImageIcon(bicap));
                            if (!faces.empty()) {
                                for (int i = 0; i < faces.size(); i++) {
                                    Rect object = faces.get(i);

                                    int h = object.height();
                                    int w = object.width();
                                    int x = object.x();
                                    int y = object.y();
                                    hw.append(h + "," + w + "," + x + "," + y);
                                    if (i != faces.size() - 1) {
                                        hw.append(",");
                                    }
                                    if (ischecked.isSelected()) {
                                        Mat m = new Mat(gray, object);
                                        imwrite(ServerConstants.writefilepath, m);
                                        String re = getResult.main(ServerConstants.writefilepath);
                                        if (re != null) {
                                            allDataRatingsWord.add(re);
                                            System.out.println(re);
                                            putText(captured, re, new Point(x + 10, y + 10), 0, 1, Scalar.RED);
//                                            audioPlayer.gotoChoice(re);

                                        }
                                        m.release();
                                    }
                                    object.deallocate();
                                }
//                                if (ischecked.isSelected()) {
//                                } else {
//                                    audioPlayer.gotoChoice("stop");
//                                }
                                for (int i = 0; i < faces.size(); i++) {
                                    Rect r = faces.get(i);
                                    rectangle(
                                            captured,
                                            new org.bytedeco.javacpp.opencv_core.Point(r.x(), r.y()),
                                            new org.bytedeco.javacpp.opencv_core.Point(r.x() + r.width(), r.y() + r.height()), Scalar.GREEN, 1, 8, 0);

                                }
//           


                                // Variable for landmarks. 
                                // Landmarks for one face is a vector of points
                                // There can be more than one face in the image.
                                Point2fVectorVector landmarks = new Point2fVectorVector();

                                // Run landmark detector
                                boolean success = facemark.fit(captured, faces, landmarks);

                                if (success) {
                                    // If successful, render the landmarks on the face
                                    for (long i = 0; i < landmarks.size(); i++) {
                                        Point2fVector v = landmarks.get(i);
                                        Point2f[] p = v.get();
                                        for (int j = 0; j < p.length; j++) {
                                            Point2f point2f = p[j];
                                            int x = (int) Math.ceil(point2f.x());
                                            int y = (int) Math.ceil(point2f.y());
                                            xx.append(x);
                                            yy.append(y);
                                            if (j != p.length - 1) {
                                                xx.append(",");
                                                yy.append(",");

                                            }
//                           
                                        }
                                        xy.append(xx + "," + yy);
//                           
                                        double[] pt = FaceEmotions.StringBufferTODoubleArray(xy);
                                        double[] hwp = FaceEmotions.StringBufferTODoubleArray(hw);
//                            System.out.println("pt = "+pt.length);
//                            System.out.println("hwp "+hwp.length);
                                        xy.delete(0, xy.length());
                                        hw.delete(0, hw.length());
                                        if (ischecked.isSelected()) {
                                            Mat img1 = null;// SingleImagePoints.drawSumMarks(pt, captured, hwp);
                                            if (img1 != null) // Display results 
                                            {
                                                capt = OpenCVHelper.mat2frame(img1);
                                                bicap = OpenCVHelper.frame2buffered(capt);


                                            }
                                            capt = OpenCVHelper.mat2frame(captured);
                                            bicap = OpenCVHelper.frame2buffered(capt);
                                            result.setIcon(new ImageIcon(bicap));
                                            img1 = null;
                                        }
                                        capt = null;
                                        bicap = null;
                                    }

                                }
                                gray.release();
                                captured.release();
                                faces.deallocate();
                                xy.delete(0, xy.length());
                                hw.delete(0, hw.length());
                                yy.delete(0, yy.length());
                                xx.delete(0, xx.length());
                            }
                        }

                    }
                    if (cap != null) {
                        cap.release();
                    }
                    //            private void rectangle(Mat captured, opencv_core.Point point, opencv_core.Point point0, Scalar GREEN, int i, int i0, int i1) {
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;
            }
        }.execute();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed

        if (cap != null) {
            cap.release();
            breakLoop = true;
            cap = null;
        }
//        if (faceDetector != null || eyeDetector != null) {
//            faceDetector.empty();
//            eyeDetector.empty();
//        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed

    private void liveCameraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liveCameraMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_liveCameraMouseClicked

    private void resultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_resultMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        model2 = (DefaultTableModel) jTable2.getModel();
        model2.setRowCount(0);
        model3 = (DefaultTableModel) jTable3.getModel();
        model3.setRowCount(0);
        String path = pathField1.getText();
        Mat frame = OpenCVHelper.file2mat(path);
        ServerConstants.imgw = frame.size().width();
        ServerConstants.imgh = frame.size().height();
        org.bytedeco.javacpp.opencv_core.RectVector faces = new org.bytedeco.javacpp.opencv_core.RectVector();
        Mat gray = new Mat(480, 600, 1);
        cvtColor(frame, gray, COLOR_BGR2GRAY);
        equalizeHist(gray, gray);
        ArrayList<String> a = new ArrayList<String>();


        faceDetector.detectMultiScale(gray, faces);

        StringBuffer xy = new StringBuffer();
        StringBuffer hw = new StringBuffer();
        StringBuffer xx = new StringBuffer();
        StringBuffer yy = new StringBuffer();

        if (!faces.empty()) {
            for (int i = 0; i < faces.size(); i++) {
                Rect object = faces.get(i);
                int h = object.height();
                int w = object.width();
                int x = object.x();
                int y = object.y();
                hw.append(h + "," + w + "," + x + "," + y);
                if (i != faces.size() - 1) {
                    hw.append(",");
                }
                Mat m = new Mat(gray, object);
                imwrite(ServerConstants.writefilepath, m);
                String re = getResult.main(ServerConstants.writefilepath);
                System.out.println(re + " " + captured);
                a.add(re);
                putText(frame, "---", new Point(x + 10, y + 10), 0, 1, Scalar.RED);
                m.release();
            }
            org.bytedeco.javacpp.opencv_core.Point2fVectorVector landmarks = new org.bytedeco.javacpp.opencv_core.Point2fVectorVector();
            boolean success = facemark.fit(frame, faces, landmarks);

            if (success) {
                for (long i = 0; i < landmarks.size(); i++) {
                    org.bytedeco.javacpp.opencv_core.Point2fVector v = landmarks.get(i);
                    org.bytedeco.javacpp.opencv_core.Point2f[] p = v.get();
                    for (int j = 0; j < p.length; j++) {
                        org.bytedeco.javacpp.opencv_core.Point2f point2f = p[j];
                        int x = (int) Math.ceil(point2f.x());
                        int y = (int) Math.ceil(point2f.y());
                        xx.append(x);
                        yy.append(y);

                        if (j != p.length - 1) {
                            xx.append(",");
                            yy.append(",");

                        }
//                        circle(frame, new Point(x, y),
//                                10, Scalar.RED);
//                        putText(frame, j + "", new Point(x, y), 0, 0.3, Scalar.GREEN);
                    }
                    xy.append(xx + "," + yy);
                    drawFacemarks(frame, v, Scalar.YELLOW);
//                    drawLandmark(getPoint(p), frame, filename);
                    double[] pt = FaceEmotions.StringBufferTODoubleArray(xy);
                    double[] hwp = FaceEmotions.StringBufferTODoubleArray(hw);
                    Mat img1 = SingleImagePoints.drawSumMarks(pt, frame, hwp);

                }
            }

        }
        System.out.println("Feature Length " + SingleImagePoints.feature.length);
        for (int i = 0; i < SingleImagePoints.feature.length; i++) {
            model2.addRow(new Object[]{(i + 1), SingleImagePoints.feature[i][0], SingleImagePoints.feature[i][1], SingleImagePoints.feature[i][2], SingleImagePoints.feature[i][3], SingleImagePoints.feature[i][4], SingleImagePoints.feature[i][5], SingleImagePoints.feature[i][6]});
        }
        String emotion = "";
        String[] emo = new String[a.size()];
        for (int i = 0; i < a.size(); i++) {

            emo[i] = StringHelper.n2s(a.get(i));

            model3.addRow(new Object[]{(i + 1), emo[i]});
            emotion += emo[i];
        }

//        emotion = getMaxEmotion(emotion);
        jLabelFinal.setText(emotion);


    }//GEN-LAST:event_jButton2ActionPerformed
    public static String getEmotion(String em) {
//           ['angry','disgust','fear','happy','sad','surprise','neutral']
        if (em.equalsIgnoreCase("0")) {
            return "angry";
        } else if (em.equalsIgnoreCase("1")) {
            return "disgust";
        } else if (em.equalsIgnoreCase("2")) {
            return "fear";
        } else if (em.equalsIgnoreCase("3")) {
            return "happy";
        } else if (em.equalsIgnoreCase("4")) {
            return "sad";
        } else if (em.equalsIgnoreCase("5")) {
            return "surprise";
        } else if (em.equalsIgnoreCase("6")) {
            return "neutral";
        }
        return null;
    }

    public static String getFeedBack(String em) {
//           ['angry','disgust','fear','happy','sad','surprise','neutral']
        if (em.equalsIgnoreCase("angry")) {
            return "1";
        } else if (em.equalsIgnoreCase("disgust")) {
            return "2";
        } else if (em.equalsIgnoreCase("fear")) {
            return "3";
        } else if (em.equalsIgnoreCase("happy")) {
            return "5";
        } else if (em.equalsIgnoreCase("sad")) {
            return "2.5";
        } else if (em.equalsIgnoreCase("surprise")) {
            return "3.5";
        } else if (em.equalsIgnoreCase("neutral")) {
            return "4";
        }
        return null;
    }

    public static String getFeed(String em) {
//           ['angry','disgust','fear','happy','sad','surprise','neutral']
        if (em.equalsIgnoreCase("angry")) {
            return "1";
        } else if (em.equalsIgnoreCase("disgust")) {
            return "2";
        } else if (em.equalsIgnoreCase("fear")) {
            return "3";
        } else if (em.equalsIgnoreCase("happy")) {
            return "5";
        } else if (em.equalsIgnoreCase("sad")) {
            return "2.5";
        } else if (em.equalsIgnoreCase("surprise")) {
            return "3.5";
        } else if (em.equalsIgnoreCase("neutral")) {
            return "4";
        }
        return "";
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String sname = file.getAbsolutePath();
            pathField1.setText(sname);

            BufferedImage bufImage = null;
            try {
                bufImage = ImageIO.read(new File(sname));
                bufImage = resize(bufImage, 480, 640);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            ProcessImageLable.setIcon(new ImageIcon(bufImage));
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:


        StringBuffer infile = FileHelper.getFileContent(ServerConstants.trainddatafilepath);
//        File f=new File(dir);
        String file = StringHelper.n2s(infile);
        String[] con = file.split("\n");
        System.out.println(con.length);
        model1 = (DefaultTableModel) jTable4.getModel();
        model1.setRowCount(0);

        String listval;
//        listval= con[0];
//        System.out.println("list"+listval);
//        System.out.println("" + allData.size());
        for (int i = 0; i < con.length; i++) {

//            for (int j = 0; j < arrayList.size(); j++) {
            listval = con[i];
            String[] strings = listval.split(",");
            model1.addRow(new Object[]{(i + 1), strings[0], strings[1], strings[2], strings[3], strings[4], strings[5], strings[6], strings[7]});
//            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void ischeckedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ischeckedItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ischeckedItemStateChanged
    public static String numericFeedback(String[] emotionData) {
        double score = 0.0;
        String str = "";
        for (int i = 0; i < emotionData.length; i++) {
            double da = StringHelper.n2d(emotionData[i].split("_")[1]);
            if (score < da) {
                str = emotionData[i].split("_")[0];
            }
        }

        return getFeedBack(str);
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        StringBuffer sb2 = new OsHelper().getCommandOutput("cmd /c taskkill /f /im python.exe", "C:\\windows\\system32", 0);
    }//GEN-LAST:event_formWindowClosing
    private static BufferedImage resize(BufferedImage img, int height, int width) {
        Image tmp = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = resized.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();
        return resized;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ProcessImageLable;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel imageLable;
    private javax.swing.JCheckBox ischecked;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelFinal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JPanel jpanelbody;
    private javax.swing.JLabel liveCamera;
    private javax.swing.JTextField pathField1;
    private javax.swing.JLabel result;
    private org.jdatepicker.impl.SqlDateModel sqlDateModel1;
    private org.jdatepicker.impl.SqlDateModel sqlDateModel2;
    // End of variables declaration//GEN-END:variables

    private String getMaxEmotion(String str) {
        int count[] = new int[ASCII_SIZE];

        // Construct character count array from the input
        // string.
        int len = str.length();
        for (int i = 0; i < len; i++) {
            count[str.charAt(i)]++;
        }

        int max = -1; // Initialize max count
        char result = ' '; // Initialize result

        // Traversing through the string and maintaining
        // the count of each character
        for (int i = 0; i < len; i++) {
            if (max < count[str.charAt(i)]) {
                max = count[str.charAt(i)];
                result = str.charAt(i);
            }
        }

        return StringHelper.n2s(result);
    }
}
